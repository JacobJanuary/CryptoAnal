import os
import mysql.connector
import requests
from datetime import datetime
from dotenv import load_dotenv
from tabulate import tabulate
import gspread
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class CryptoPriceAnalyzer:
    def __init__(self):
        self.db_connection = None
        self.cmc_api_key = os.getenv('CMC_API_KEY')
        self.cmc_base_url = 'https://pro-api.coinmarketcap.com'
        self.google_sheets_enabled = False
        self.setup_google_sheets()

    def setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            credentials_path = os.getenv('GOOGLE_CREDENTIALS_PATH')
            if not credentials_path or not os.path.exists(credentials_path):
                print("‚ö†Ô∏è  Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω—ã: —Ñ–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]

            credentials = Credentials.from_service_account_file(credentials_path, scopes=scope)
            self.gc = gspread.authorize(credentials)
            self.google_sheets_enabled = True
            print("‚úÖ Google Sheets API –ø–æ–¥–∫–ª—é—á–µ–Ω")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Sheets: {e}")
            self.google_sheets_enabled = False

    def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db_connection = mysql.connector.connect(
                host=os.getenv('DB_HOST'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                database=os.getenv('MYSQL_DATABASE'),
                port=int(os.getenv('DB_PORT', 3306))
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True
        except mysql.connector.Error as err:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {err}")
            return False

    def get_favorite_coins(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        try:
            cursor = self.db_connection.cursor()
            query = """
                    SELECT id, name, symbol
                    FROM cmc_crypto
                    WHERE id IN (SELECT coin_id FROM cmc_favorites)
                    """
            cursor.execute(query)
            coins = cursor.fetchall()
            cursor.close()

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(coins)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return coins
        except mysql.connector.Error as err:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {err}")
            return []

    def get_historical_prices_batch(self, coin_ids, date_str="2025-04-07"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –¥–ª—è –ø–∞–∫–µ—Ç–∞ –≤–∞–ª—é—Ç"""
        headers = {
            'X-CMC_PRO_API_KEY': self.cmc_api_key,
            'Accept': 'application/json'
        }

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ timestamp
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        timestamp = int(date_obj.timestamp())

        # CMC API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 100 ID –∑–∞ —Ä–∞–∑
        batch_size = 100
        all_prices = {}

        for i in range(0, len(coin_ids), batch_size):
            batch_ids = coin_ids[i:i + batch_size]
            ids_str = ','.join(map(str, batch_ids))

            url = f"{self.cmc_base_url}/v1/cryptocurrency/quotes/historical"
            params = {
                'id': ids_str,
                'time_start': timestamp,
                'time_end': timestamp,
                'count': 1,
                'interval': 'daily'
            }

            try:
                response = requests.get(url, headers=headers, params=params)
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data:
                        for coin_id_str, coin_data in data['data'].items():
                            coin_id = int(coin_id_str)
                            if 'quotes' in coin_data and coin_data['quotes']:
                                price = coin_data['quotes'][0]['quote']['USD']['price']
                                all_prices[coin_id] = price
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ): {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω: {e}")

        return all_prices

    def get_current_prices_batch(self, coin_ids):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è –ø–∞–∫–µ—Ç–∞ –≤–∞–ª—é—Ç"""
        headers = {
            'X-CMC_PRO_API_KEY': self.cmc_api_key,
            'Accept': 'application/json'
        }

        # CMC API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 5000 ID –∑–∞ —Ä–∞–∑ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
        batch_size = 1000
        all_prices = {}

        for i in range(0, len(coin_ids), batch_size):
            batch_ids = coin_ids[i:i + batch_size]
            ids_str = ','.join(map(str, batch_ids))

            url = f"{self.cmc_base_url}/v1/cryptocurrency/quotes/latest"
            params = {'id': ids_str}

            try:
                response = requests.get(url, headers=headers, params=params)
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data:
                        for coin_id_str, coin_data in data['data'].items():
                            coin_id = int(coin_id_str)
                            price = coin_data['quote']['USD']['price']
                            all_prices[coin_id] = price
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API (—Ç–µ–∫—É—â–∏–µ): {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω: {e}")

        return all_prices

    def calculate_price_change(self, old_price, new_price):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        if old_price and new_price and old_price > 0:
            return ((new_price - old_price) / old_price) * 100
        return None

    def analyze_coins(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.connect_db():
            return

        if not self.cmc_api_key:
            print("‚ùå API –∫–ª—é—á Coinmarketcap –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return

        coins = self.get_favorite_coins()
        if not coins:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–ª—è –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        coin_ids = [coin[0] for coin in coins]
        coin_dict = {coin[0]: {'name': coin[1], 'symbol': coin[2]} for coin in coins}

        print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –¥–ª—è {len(coin_ids)} –≤–∞–ª—é—Ç...")
        historical_prices = self.get_historical_prices_batch(coin_ids)

        print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è {len(coin_ids)} –≤–∞–ª—é—Ç...")
        current_prices = self.get_current_prices_batch(coin_ids)

        results = []

        print("\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        for coin_id in coin_ids:
            coin_info = coin_dict[coin_id]
            historical_price = historical_prices.get(coin_id)
            current_price = current_prices.get(coin_id)

            if historical_price and current_price:
                price_change = self.calculate_price_change(historical_price, current_price)

                results.append({
                    'name': coin_info['name'],
                    'symbol': coin_info['symbol'],
                    'price_april_7': historical_price,
                    'current_price': current_price,
                    'change_percent': price_change
                })
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_info['symbol']} (ID: {coin_id})")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        results.sort(key=lambda x: x['change_percent'] if x['change_percent'] else float('-inf'), reverse=True)

        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        self.display_results(results)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
        historical_batches = (len(coin_ids) + 99) // 100  # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
        current_batches = (len(coin_ids) + 999) // 1000  # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
        total_requests = historical_batches + current_batches

        print(f"\nüí° –≠–∫–æ–Ω–æ–º–∏—è API —Ç–æ–∫–µ–Ω–æ–≤:")
        print(f"   –ë–µ–∑ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(coin_ids) * 2} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   –° –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {len(coin_ids) * 2 - total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if self.db_connection:
            self.db_connection.close()

    def display_results(self, results):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        if not results:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        print("\n" + "=" * 80)
        print("üìä –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢")
        print("=" * 80)

        table_data = []
        for result in results:
            change_str = f"{result['change_percent']:.2f}%" if result['change_percent'] else "N/A"

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            if result['change_percent']:
                if result['change_percent'] > 0:
                    change_str = f"üü¢ +{change_str}"
                else:
                    change_str = f"üî¥ {change_str}"

            table_data.append([
                result['name'],
                result['symbol'],
                f"${result['price_april_7']:.4f}" if result['price_april_7'] else "N/A",
                f"${result['current_price']:.4f}" if result['current_price'] else "N/A",
                change_str
            ])

        headers = ['–ü—Ä–æ–µ–∫—Ç', '–°–∏–º–≤–æ–ª', '–¶–µ–Ω–∞ 07.04.2025', '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ %']

        print(tabulate(table_data, headers=headers, tablefmt='grid'))
        print(f"\nüìà –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –≤–∞–ª—é—Ç")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
        if self.google_sheets_enabled:
            self.export_to_google_sheets(results)

    def export_to_google_sheets(self, results):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É"""
        try:
            spreadsheet_name = os.getenv('GOOGLE_SPREADSHEET_NAME', 'Crypto Price Analysis')

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
            try:
                spreadsheet = self.gc.open(spreadsheet_name)
                print(f"üìã –û—Ç–∫—Ä—ã—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_name}")
            except gspread.SpreadsheetNotFound:
                spreadsheet = self.gc.create(spreadsheet_name)
                print(f"üìã –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_name}")

                # –î–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                spreadsheet.share('', perm_type='anyone', role='writer')

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                worksheet = spreadsheet.sheet1
            except:
                worksheet = spreadsheet.add_worksheet(title="Analysis", rows="1000", cols="20")

            # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
            worksheet.clear()

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            headers = ['–ü—Ä–æ–µ–∫—Ç', '–°–∏–º–≤–æ–ª', '–¶–µ–Ω–∞ 07.04.2025', '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ %', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ $']

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
            worksheet.update('A1:F1', [[f'–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - {timestamp}', '', '', '', '', '']])

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            worksheet.update('A3:F3', [headers])

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            rows_data = []
            for result in results:
                change_percent = f"{result['change_percent']:.2f}%" if result['change_percent'] else "N/A"
                change_dollar = ""

                if result['price_april_7'] and result['current_price']:
                    change_dollar = f"${result['current_price'] - result['price_april_7']:.4f}"

                rows_data.append([
                    result['name'],
                    result['symbol'],
                    f"${result['price_april_7']:.4f}" if result['price_april_7'] else "N/A",
                    f"${result['current_price']:.4f}" if result['current_price'] else "N/A",
                    change_percent,
                    change_dollar
                ])

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if rows_data:
                range_name = f'A4:F{3 + len(rows_data)}'
                worksheet.update(range_name, rows_data)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self.format_google_sheet(worksheet, len(rows_data))

            spreadsheet_url = f"https://docs.google.com/spreadsheets/d/{spreadsheet.id}"
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É: {spreadsheet_url}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets: {e}")

    def format_google_sheet(self, worksheet, data_rows):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            worksheet.format('A1:F1', {
                'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
                'textFormat': {'bold': True, 'fontSize': 14},
                'horizontalAlignment': 'CENTER'
            })

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            worksheet.format('A3:F3', {
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8},
                'textFormat': {'bold': True},
                'horizontalAlignment': 'CENTER',
                'borders': {
                    'top': {'style': 'SOLID'},
                    'bottom': {'style': 'SOLID'},
                    'left': {'style': 'SOLID'},
                    'right': {'style': 'SOLID'}
                }
            })

            # –î–∞–Ω–Ω—ã–µ
            if data_rows > 0:
                data_range = f'A4:F{3 + data_rows}'
                worksheet.format(data_range, {
                    'borders': {
                        'top': {'style': 'SOLID'},
                        'bottom': {'style': 'SOLID'},
                        'left': {'style': 'SOLID'},
                        'right': {'style': 'SOLID'}
                    }
                })

                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å —Ü–µ–Ω–∞–º–∏ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                worksheet.format(f'C4:F{3 + data_rows}', {
                    'horizontalAlignment': 'RIGHT'
                })

            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet.columns_auto_resize(0, 5)

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    analyzer = CryptoPriceAnalyzer()
    analyzer.analyze_coins()


if __name__ == "__main__":
    main()